import sqlite3
import pandas as pd
from bokeh.layouts import column
from bokeh.models import (ColumnDataSource, DataTable, TableColumn, NumberFormatter,
                          HoverTool, FactorRange, Legend, LegendItem, CustomJS)
from bokeh.plotting import figure, show
from bokeh.palettes import Spectral10
from bokeh.io import output_file

def create_visualization():
    # Connect to the SQLite database
    conn = sqlite3.connect('plant_data.db')
    
    # Read data into a pandas DataFrame
    df = pd.read_sql_query("SELECT * FROM plant_data", conn)
    
    # Ensure the 'mean_percentage_abundance' is non-null for visualization
    df['mean_percentage_abundance'] = df['mean_percentage_abundance'].fillna(0)
    
    # Create a ColumnDataSource for Bokeh, include all relevant columns
    source = ColumnDataSource(df)
    
    # Define table columns
    columns = [
        TableColumn(field="RI", title="RI", formatter=NumberFormatter(format="0.00")),
        TableColumn(field="chemical_constituent", title="Chemical Constituent"),
        TableColumn(field="plant_code", title="Plant Code"),
        TableColumn(field="botanical_name", title="Botanical Name"),
        TableColumn(field="plant_family", title="Plant Family"),
        TableColumn(field="plant_part", title="Plant Part"),
        TableColumn(field="mean_percentage_abundance", title="Mean % Abundance", formatter=NumberFormatter(format="0.000"))
    ]
    
    # Create the DataTable
    data_table = DataTable(source=source, columns=columns, width=800, height=280, index_position=None)
    
    # Aggregate data for the scatter plot
    agg_df = df.groupby(['chemical_constituent', 'plant_code'])['mean_percentage_abundance'].mean().reset_index()
    pivot_df = agg_df.pivot(index='chemical_constituent', columns='plant_code', values='mean_percentage_abundance').fillna(0)
    
    # Add botanical name to the aggregated data
    agg_df = agg_df.merge(df[['chemical_constituent', 'plant_code', 'botanical_name']], 
                          on=['chemical_constituent', 'plant_code'], how='left').drop_duplicates()
    
    # Create a scatter plot
    p = figure(width=800, height=400, title="Chemical Constituents Across Plant Species",
               x_range=FactorRange(factors=pivot_df.columns.tolist()),
               tools="pan,wheel_zoom,box_select,reset")
    
    # Add a scatter glyph for each chemical constituent
    colors = Spectral10  # Using a color palette
    legend_items = []
    for i, constituent in enumerate(pivot_df.index):
        y = pivot_df.loc[constituent].values
        botanical_names = agg_df[agg_df['chemical_constituent'] == constituent]['botanical_name'].tolist()
        
        # Create a ColumnDataSource specific to this scatter plot
        scatter_source = ColumnDataSource(data={
            'x': pivot_df.columns,
            'y': y,
            'botanical_name': botanical_names
        })
        
        color = colors[i % len(colors)]
        scatter = p.scatter(x='x', y='y', size=8, color=color, alpha=0.6, source=scatter_source)
        
        # Add hover tool for each scatter
        hover = HoverTool(renderers=[scatter], tooltips=[
            ("Botanical Name", "@botanical_name"),
            ("Chemical Constituent", constituent),
            ("Abundance", "@y{0.000}")
        ])
        p.add_tools(hover)
        
        # Add to legend items
        legend_items.append(LegendItem(label=constituent, renderers=[scatter]))
    

    # Link the table and plot selection
    source.selected.js_on_change("indices", CustomJS(args=dict(source=source, plot=p), code="""
    const indices = cb_obj.indices;
    const data = source.data;
    
    // Clear all existing selections
    plot.renderers.forEach(r => {
        if (r.glyph && r.data_source) {
            r.data_source.selected.indices = [];
        }
    });
    
    // Highlight selected points
    indices.forEach(i => {
        const chemical = data['chemical_constituent'][i];
        const plant_code = data['plant_code'][i];
        const abundance = data['mean_percentage_abundance'][i];
        
        plot.renderers.forEach(r => {
            if (r.glyph && r.data_source) {
                const idx = r.data_source.data['x'].indexOf(plant_code);
                if (idx !== -1 && r.data_source.data['y'][idx] === abundance) {
                    r.data_source.selected.indices.push(idx);
                }
            }
        });
    });
    
    // Trigger a change event to update the plot
    plot.change.emit();
    """))

    # Customize the plot
    p.xaxis.axis_label = "Plant Code"
    p.yaxis.axis_label = "Mean Percentage Abundance"
    p.xaxis.major_label_orientation = 0.7
    
    # Set output to a file
    output_file("plant_data_visualization.html")
    
    # Show the plot and table
    show(column(p, data_table))

if __name__ == "__main__":
    create_visualization()
